{ config, pkgs, ... }:

{
  # Basic Home Manager configuration
  home.username = "xx";
  home.homeDirectory = "/home/xx";
  home.stateVersion = "25.05";

  # Nixpkgs configuration
  nixpkgs.config.allowUnfree = true;
  home.enableNixpkgsReleaseCheck = false;

  # Essential packages
  home.packages = with pkgs; [
    # Development tools
    git
    nodejs
    python3
    docker
    docker-compose

    # Editors
    neovim
    emacs
    kakoune

    # Terminals
    kitty
    oterm

    # Browsers
    # brave (handled by programs.chromium)

    # Communication
    discord
    signal-desktop

    # Media
    spotify

    # System utilities
    waybar
    rofi-wayland
    grim
    slurp
    hyprsunset
    speedtest-cli
    gnupg
    pinentry
    networkmanagerapplet
    wayland-protocols
    wayland-utils
    wl-clipboard
    wlroots
    zellij
    screen

    # File management
    nautilus
    unzip
    zip
    tree
    fd
    ripgrep
    bat
    eza
  ];

  # Environment variables
  home.sessionVariables = {
    # Wayland optimization
    NIXOS_OZONE_WL = "1";
    MOZ_ENABLE_WAYLAND = "1";
    XDG_CURRENT_DESKTOP = "Hyprland";
    XDG_SESSION_DESKTOP = "Hyprland";
    XDG_SESSION_TYPE = "wayland";
  };

  # Shell configurations
  programs.bash = {
    enable = true;
    shellAliases = {
      speedtest = "speedtest --secure";
    };
    initExtra = ''
      export GPG_TTY=$(tty)
      export PINENTRY_USER_DATA="USE_CURSES=1"
    '';
  };

  programs.zsh = {
    enable = true;
    shellAliases = {
      speedtest = "speedtest --secure";
    };
    initExtra = ''
      export GPG_TTY=$(tty)
      export PINENTRY_USER_DATA="USE_CURSES=1"
    '';
  };

  # Git configuration
  programs.git = {
    enable = true;
    userName = "kae3g";
    userEmail = "kae3g@users.noreply.github.com";
    extraConfig = {
      init.defaultBranch = "main";
      pull.rebase = false;
      commit.gpgsign = true;
      tag.gpgSign = true;
      gpg.format = "ssh";
      user.signingkey = "374AC48A537583C9";
    };
  };

  # GPG configuration
  programs.gpg = {
    enable = true;
    settings = {
      pinentry-program = "pinentry-curses";
    };
  };

  # Services
  services = {
    gnome-keyring.enable = true;
    gpg-agent = {
      enable = true;
      defaultCacheTtl = 1800;
      maxCacheTtl = 7200;
      enableSshSupport = true;
    };
  };

  # Chromium/Brave configuration
  programs.chromium = {
    enable = true;
    package = pkgs.brave;
    extensions = [
      # Add any extensions you want here
    ];
  };

  # VSCode/Cursor configuration
  programs.vscode = {
    package = pkgs.code-cursor;
    profiles.default = {
      extensions = with pkgs.vscode-extensions; [
        # Add any extensions you want here
      ];
      userSettings = {
        "window.titleBarStyle" = "custom";
        "window.useNativeTitleBar" = false;
        # Terminal environment variables for GPG support
        "terminal.integrated.env.linux" = {
          "GPG_TTY" = "$(tty)";
          "GNOME_KEYRING_CONTROL" = "$XDG_RUNTIME_DIR/keyring";
          "SSH_AUTH_SOCK" = "$XDG_RUNTIME_DIR/keyring/ssh";
        };
        # Git configuration for Cursor
        "git.enableCommitSigning" = true;
        "git.gpgPath" = "gpg";
        # Terminal settings
        "terminal.integrated.shell.linux" = "/home/xx/.nix-profile/bin/zsh";
        "terminal.integrated.inheritEnv" = true;
      };
    };
  };

  # Kitty terminal configuration
  programs.kitty = {
    enable = true;
    settings = {
      font_family = "JetBrains Mono";
      font_size = 12;
      background_opacity = "0.9";
    };
  };

  # Hyprland configuration
  wayland.windowManager.hyprland = {
    enable = true;
    package = pkgs.hyprland;
    settings = {
      # Monitor configuration
      monitor = ",preferred,auto,1";

      # Input configuration
      input = {
        kb_layout = "us";
        kb_variant = "";
        kb_model = "";
        kb_options = "";
        kb_rules = "";
        follow_mouse = 1;
        touchpad = {
          natural_scroll = "no";
        };
        sensitivity = 0;
      };

      # General settings
      general = {
        gaps_in = 5;
        gaps_out = 20;
        border_size = 2;
        "col.active_border" = "rgba(33ccffee) rgba(00ff99ee) 45deg";
        "col.inactive_border" = "rgba(595959aa)";
        layout = "dwindle";
        allow_tearing = false;
      };

      # Decoration settings
      decoration = {
        rounding = 10;
        blur = {
          enabled = true;
          size = 3;
          passes = 1;
        };
      };

      # Animation settings
      animations = {
        enabled = "yes";
        bezier = "myBezier, 0.05, 0.9, 0.1, 1.05";
        animation = [
          "windows, 1, 7, myBezier"
          "windowsOut, 1, 7, default, popin 80%"
          "border, 1, 10, default"
          "borderangle, 1, 8, default"
          "fade, 1, 7, default"
          "workspaces, 1, 6, default"
        ];
      };

      # Dwindle layout
      dwindle = {
        pseudotile = "yes";
        preserve_split = "yes";
      };

      # Master layout
      master = {
      };

      # Gestures
      gestures = {
        workspace_swipe = "off";
      };

      # Device configuration
      device = {
        name = "epic-mouse-v1";
        sensitivity = -0.5;
      };

      # Window rules
      # Window rules
      # Window rules
      # Window rules
      windowrule = [
        "float, class:^(pavucontrol)$"
        "float, class:^(blueman-manager)$"
        "float, class:^(nm-connection-editor)$"
        "float, class:^(chromium)$"
        "float, class:^(thunar)$"
        "float, class:^(code-cursor)$"
        "float, class:^(org.kde.polkit-kde-authentication-agent-1)$"
      ];


      # Keybindings
      "$mainMod" = "SUPER";
      bind = [
        # Essential applications
        "$mainMod, Return, exec, kitty"
        "$mainMod, Q, exec, kitty"
        "$mainMod, B, exec, brave"
        "$mainMod, D, exec, code-cursor"
        "$mainMod, E, exec, nautilus"
        "$mainMod, R, exec, rofi-wayland --show drun"

        # Window management
        "$mainMod, C, killactive"
        "$mainMod, SHIFT, Q, killactive"
        "$mainMod, V, togglefloating"
        "$mainMod, P, pseudo"
        "$mainMod, J, togglesplit"
        "$mainMod, F, fullscreen, 1"
        "$mainMod, SHIFT, F, fullscreen, 0"

        # Workspace navigation
        "$mainMod, 1, workspace, 1"
        "$mainMod, 2, workspace, 2"
        "$mainMod, 3, workspace, 3"
        "$mainMod, 4, workspace, 4"
        "$mainMod, 5, workspace, 5"
        "$mainMod, 6, workspace, 6"
        "$mainMod, 7, workspace, 7"
        "$mainMod, 8, workspace, 8"
        "$mainMod, 9, workspace, 9"
        "$mainMod, 0, workspace, 10"

        # Move window to workspace
        "$mainMod, SHIFT, 1, movetoworkspace, 1"
        "$mainMod, SHIFT, 2, movetoworkspace, 2"
        "$mainMod, SHIFT, 3, movetoworkspace, 3"
        "$mainMod, SHIFT, 4, movetoworkspace, 4"
        "$mainMod, SHIFT, 5, movetoworkspace, 5"
        "$mainMod, SHIFT, 6, movetoworkspace, 6"
        "$mainMod, SHIFT, 7, movetoworkspace, 7"
        "$mainMod, SHIFT, 8, movetoworkspace, 8"
        "$mainMod, SHIFT, 9, movetoworkspace, 9"
        "$mainMod, SHIFT, 0, movetoworkspace, 10"

        # Window focus (arrow keys)
        "$mainMod, left, movefocus, l"
        "$mainMod, right, movefocus, r"
        "$mainMod, up, movefocus, u"
        "$mainMod, down, movefocus, d"

        # Window focus (vim-style)
        "$mainMod, h, movefocus, l"
        "$mainMod, l, movefocus, r"
        "$mainMod, k, movefocus, u"
        "$mainMod, j, movefocus, d"

        # Screenshots
        "$mainMod, S, exec, grim -g \"$(slurp)\" - | wl-copy"
        "$mainMod SHIFT, S, exec, grim - | wl-copy"

        # Blue light filter toggle
        "$mainMod, SHIFT, B, exec, $HOME/nixos-config-backup/scripts/hyprsunset-toggle.sh"

        # Emergency controls
        "$mainMod, M, exit"
      ];

      # Mouse bindings
      bindm = [
        "$mainMod, mouse:272, movewindow"
        "$mainMod, mouse:273, resizewindow"
      ];

      # Startup applications
      exec-once = [
        "waybar"
        "hyprpaper"
        "hyprsunset"
      ];
    };
  };

  # Hyprland wallpaper configuration
  home.file = {
    ".config/hypr/hyprpaper.conf".text = ''
      preload = "/home/xx/Pictures/wallpaper.jpg"
      wallpaper = ,"/home/xx/Pictures/wallpaper.jpg"
    '';
  };

  # Waybar overlay for experimental features
  nixpkgs.overlays = [
    (self: super: {
      waybar = super.waybar.overrideAttrs (oldAttrs: {
        mesonFlags = oldAttrs.mesonFlags ++ [ "-Dexperimental=true" ];
      });
    })
  ];
}
